---
title: Overview
subtitle: A technical overview of customizing the theme, creating the skeleton template, and merging the two together
order: 1
---

The [NOAA Fisheries](https://www.fisheries.noaa.gov/) [Southeast Fisheries Science Center (SEFSC)](https://www.fisheries.noaa.gov/about/southeast-fisheries-science-center) is actively developing a suite of new, innovative machine learning models designed to increase data processing efficiencies across the Center’s mission portfolio. These projects include, but are not limited to, automating the processing of Gulf and South Atlantic video survey data to derive species counts, automating aging of Gulf and Atlantic menhaden and red snapper, and automating the derivation of fish lengths from stereo video. These models were developed in Python using open-source libraries (e.g., PyTorch, cudatoolkit, Torchvision, and scikit-learn) by partners through the [NOAA Northern Gulf Institute (NGI)](https://www.northerngulfinstitute.org/) and the [Cooperative Institute for Climate, Ocean, and Ecosystem Studies (CICOES)](https://cicoes.uw.edu/) and are or will be maintained on the [SEFSC Organization GitHub account](https://github.com/SEFSC).

Introducing new computer models into the Center’s data processing procedures necessitates adequate documentation so that the end users will know how to install and execute the models in operational use. Indeed, all computer models and software should be documented by the developers before being released to the intended end user. In the absence of a universally accepted documentation template for use within the SEFSC, NOAA Fisheries, or even NOAA at large, staff across NOAA have established their own approaches and templates of varying degrees of complexity based on their immediate needs. Some examples of these solutions are summarized in Table 1 along with notable strengths and weaknesses of each.

Several features were prioritized when selecting a platform for SEFSC documentation:

1. Content version control
2. Documentation existing alongside the model source code
3. Minimal learning curve for populating and maintaining content
4. Layout and formatting customization to align with agency visual branding requirements  


<table style="font-size:small; width:75%; align:center; margin-left:auto; margin-right:auto; background:#E8E8E8">
  <caption style="text-align:left"><hr><b>Table 1:</b> A variety of resources have been used across NOAA for documenting procedures or applications, each having its own advantages and disadvantages. In the absence of guidance or directives, users currently select the approach best suited to their needs. This non-exhaustive list provides some examples of documentation solutions.</caption>
  <tbody>
    <tr>
      <th style="font-size:medium; text-align:center">DOCUMENTATION SOLUTION</th>
      <th style="font-size:medium; text-align:center">ADVANTAGES</th>
      <th style="font-size:medium; text-align:center">DISADVANTAGES</th>
    </tr>
    <tr>
      <td valign="top"><b>Microsoft Word</b> or <b>Google Doc</b></td>
      <td valign="top">
        <ul>
          <li>Creation is straightforward</li>
          <li>Easily converted to PDF</li>
          <li>Software readily available to NOAA staff</li>
        </ul>
      </td>
      <td valign="top">
        <ul>
          <li>Not co-located with software</li>
          <li>Document owner often retains ownership</li>
          <li>Difficult to share publicly</li>
          <li>No version control</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td valign="top"><b>GitHub respository Wiki</b> <br><br> Example: NOAA IOOS <a href="https://github.com/ioos/ioosngdac/wiki/DAC-Documentation">National Glider Data Assembly Center (NGDAC) Documentation</a> (<i>archived</i>)</td>
      <td valign="top">
        <ul>
          <li>Consistent formatting across all GitHub repositories (repos)</li>
          <li>Connected to the repo in which application is hosted</li>
          <li>Public accessibility follows repo settings</li>
          <li>No local software requirements</li>
        </ul>
      </td>
      <td valign="top">
        <ul>
          <li>Limited functionality</li>
          <li>No ability to customize appearances, layouts, etc.</li>
          <li>Limited version control</li>
          <li>Learning curve with Markdown and HTML to populate content</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td valign="top"><b>Quarto webpage made with R</b> <br><br> Example: <a href="https://nmfs-opensci.github.io/NOAA-quarto-book/">Quarto webpage with book layout made in RStudio</a></td>
      <td valign="top">
        <ul>
          <li>Consistent formatting across implementations</li>
          <li>Hosted on GitHub Pages (gh-pages) alongside the software itself</li>
          <li>GitHub version controlled</li>
          <li>Template and setup guidance available via NOAA Fisheries Open Science initiative</li>
        </ul>
      </td>
      <td valign="top">
        <ul>
          <li>Learning curve with Markdown and HTML to populate content</li>
          <li>Learning curve with R and RStudio to develop content locally</li>
          <li>Learning curve with GitHub Pages and GitHub Actions if customization is needed</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td valign="top"><b>Quarto webpage made with Python</b> <br><br> Example: <a href="https://nmfs-opensci.github.io/NOAA-quarto-simple-python/">Quarto webpage with book layout made with Python</a></td>
      <td valign="top">
        <ul>
          <li>Consistent formatting across implementations</li>
          <li>Can be customized for the organization with optional centralized format control</li>
          <li>Easily templated to minimize learning curves</li>
          <li>Hosted on gh-pages within the repo in which the application is hosted</li>
          <li>Full GitHub version control</li>
          <li>Template and setup guidance available via NOAA Fisheries Open Science initiative</li>
        </ul>
      </td>
      <td valign="top">
        <ul>
          <li>Learning curve with Markdown and HTML (optional) to populate content</li>
          <li>Learning curve with GitHub Pages and GitHub Actions if customization is needed</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td valign="top"><b>GitHub Pages webpage with Jekyll theme</b> <br><br> Example: NOAA <a href="https://ioos.github.io/">IOOS Documentation Portal</a></td>
      <td valign="top">
        <ul>
          <li>Consistent formatting across implementations</li>
          <li>Can be customized for the organization with optional centralized format control</li>
          <li>Easily templated to minimize learning curves</li>
          <li>Hosted on gh-pages within the repo in which the application is hosted</li>
          <li>Full GitHub version control</li>
          <li>Template and setup guidance created by IOOS</li>
        </ul>
      </td>
      <td valign="top">
        <ul>
          <li>Learning curve with Markdown and HTML to populate content</li>
          <li>Advanced customization requires knowledge of gh-pages, GitHub Actions, CSS, and other languages</li>
          <li>Initial setup can be challenging</li>
        </ul>
      </td>
    </tr>
  </tbody>
</table>


Google Docs, though straightforward to create and widely used across NOAA, present too many challenges. File ownership is a perpetual problem, with the original author often retaining ownership and files getting lost in staffing changes. Without preserving documents’ URLs, sharing access permissions, and transferring ownership when needed, these files often get lost or are not known to exist by new staff. There is also a tendency for documents to perpetually stay in “draft” version, which casts doubt on the accuracy of the content and whether or not a final version exists. A far better solution is one that is connected to GitHub where the model code itself is hosted and maintained. One option is [GitHub Wikis](https://docs.github.com/en/communities/documenting-your-project-with-wikis/about-wikis), which can be created for any repository and have been widely used by [NOAA Integrated Ocean Observing System (IOOS)](https://ioos.noaa.gov/) programs, such as the [original National Glider Data Assembly Center documentation](https://github.com/ioos/ioosngdac/wiki/DAC-Documentation) page. Yet these Wikis offer limited version control and customization aside from the actual content. [GitHub Pages](https://pages.github.com/), a service that allows a project website to be freely hosted for any repository, offers a more comprehensive assortment of options and flexibilities including customizable themes that can be tailored to agency visual branding, the ability to control this theme in one repository and use it across any number of documents, full version control, and the option of creating a [template repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-template-repository) that can be easily duplicated and integrated into new projects. **This project uses the simplicity of [Quarto](https://quarto.org/), an open-source scientific and technical publishing system, to create a documentation website and utilizes GitHub Pages for hosting with full version control.** (For an alternative solution using Jekyll and GitHub Pages, see [SEFSC Jekyll Documentation Theme](https://mattgrossi-noaa.github.io/SEFSC-documentation-jekyll-skeleton).)
